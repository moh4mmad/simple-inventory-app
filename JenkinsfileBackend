pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID="314543738592"
        AWS_DEFAULT_REGION="ap-southeast-2" 
        CLUSTER_NAME="inventory-app-cluster"
        SERVICE_NAME="INVENTORY-APP-BACKEND-TASK"
        TASK_DEFINITION_NAME="INVENTORY-APP-BACKEND"
        DESIRED_COUNT="1"
        IMAGE_REPO_NAME="inventory-app"
        IMAGE_TAG="backend${env.BUILD_ID}"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        registryCredential = "aws-credential"
    }
   
    stages {

      
        
      // Building Docker images
      // stage('Building image') {
      //   steps{
      //     dir('backend') {
      //       script {
      //         dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
      //       }
      //     }
      //   }
      // }

      // login to AWS ECR, build the image and push it to ECR
      stage('Get temporary session token') {
        steps {
            script {
                withAWS(credentials: registryCredential, region: "${AWS_DEFAULT_REGION}") {
                    def sts = aws.STS()
                    def mfaSerial = 'arn:aws:iam::314543738592:mfa/newInventoryDevice'
                    def mfaToken = input(message: 'Enter MFA token:', parameters: [string(defaultValue: '', description: 'Enter MFA token', name: 'MFA_TOKEN')])
                    def tokenResponse = sts.getSessionToken(Duration.seconds(129600), [SerialNumber: mfaSerial, TokenCode: mfaToken])
                    def accessKeyId = tokenResponse.credentials.accessKeyId
                    def secretAccessKey = tokenResponse.credentials.secretAccessKey
                    def sessionToken = tokenResponse.credentials.sessionToken

                    sh "export AWS_ACCESS_KEY_ID=${accessKeyId}"
                    sh "export AWS_SECRET_ACCESS_KEY=${secretAccessKey}"
                    sh "export AWS_SESSION_TOKEN=${sessionToken}"

                    docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}".push()
                }
            }
        }
      }
   
    // Uploading Docker images into AWS ECR
      // stage('Pushing to ECR') {
      //   steps{  
      //       script {
      //         docker.withRegistry("https://" + REPOSITORY_URI, "ecr:${AWS_DEFAULT_REGION}:" + registryCredential)
      //         {
      //           dockerImage.push()
      //         }
      //       }
      //     }
      // }
      
      stage('Deploy') {
        steps{
          withAWS(credentials: registryCredential, region: "${AWS_DEFAULT_REGION}")
          {
            script {
              sh './script.sh'
            }
          }
        }
      }
      
    }
}