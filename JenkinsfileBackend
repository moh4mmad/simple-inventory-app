pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID="314543738592"
        AWS_DEFAULT_REGION="ap-southeast-2" 
        CLUSTER_NAME="inventory-app-cluster"
        SERVICE_NAME="INVENTORY-APP-BACKEND-TASK"
        TASK_DEFINITION_NAME="INVENTORY-APP-BACKEND"
        DESIRED_COUNT="1"
        IMAGE_REPO_NAME="inventory-app"
        IMAGE_TAG="backend${env.BUILD_ID}"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        AWS_ACCESS_KEY_ID = "ASIAUSPCER3QCJGCB654"
        AWS_SECRET_ACCESS_KEY = "H+i8mMa4Aqrx1lXcwr3WGuEYvGjbuHkRd7aGO4Ma"
        AWS_SESSION_TOKEN = "FwoGZXIvYXdzEPH//////////wEaDJ0ZzKH9j3xFiP1iwiKGAeOMs+cdw3kBtdp3ix2RApUm5CQQu4q0QPdMS8gUEWxzBHKbsJ745h/IiZkxQJdwaIFqRecOW0fYduPdfVSFT0yn014ObNmdychp7kxS8ddceCH8a7Zb/3KRpMML7Ehf5F7dIytnhXI8CLKMspXzlJxb2lpZc/EPhzI8qQFzWInpN5hP6UjsKPXYw58GMije22tvH3ESl2ZCHE3RMfQf2R6Jy57Ej9ajZde90i6J37Rn67/YhrRY"
        registryCredential = "aws-credential"
    }
   
    stages {

    // Tests
    // stage('Unit Tests') {
    //   steps{
    //     script {
    //       sh 'npm install'
    //       sh 'npm test -- --watchAll=false'
    //     }
    //   }
    // }
        
    // Building Docker images
      stage('Building image') {
        steps{
          dir('backend') {
            script {
              dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
            }
          }
        }
      }

      // Uploading Docker images into AWS ECR
      stage('Pushing to ECR') {
        steps{  
            script {

              withCredentials([[
                $class: 'AmazonWebServicesCredentialsBinding',
                accessKeyVariable: ${AWS_ACCESS_KEY_ID},
                secretKeyVariable: ${AWS_SECRET_ACCESS_KEY},
                sessionTokenVariable: ${AWS_SESSION_TOKEN},
                credentialsId: registryCredential
              ]]) {
                docker.withRegistry("https://" + REPOSITORY_URI, 'ecr') {
                  dockerImage.push()
                }
              }
            }
        }
      }
      
      stage('Deploy') {
        steps{
          withAWS(credentials: registryCredential, region: "${AWS_DEFAULT_REGION}")
          {
            script {
              sh './deploy.sh'
            }
          }
        }
      }
      
    }
}