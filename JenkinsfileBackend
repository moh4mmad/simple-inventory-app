pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID="314543738592"
        AWS_DEFAULT_REGION="ap-southeast-2" 
        CLUSTER_NAME="inventory-app-cluster"
        SERVICE_NAME="INVENTORY-APP-BACKEND-TASK"
        TASK_DEFINITION_NAME="INVENTORY-APP-BACKEND"
        DESIRED_COUNT="1"
        IMAGE_REPO_NAME="inventory-app"
        IMAGE_TAG="${env.BUILD_ID}"
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}"
        registryCredential = "aws-credential"
        AWS_MFA_SERIAL = "arn:aws:iam::314543738592:mfa/newInventoryDevice"
        MFA_TOKEN =  '312647'
    }
   
    stages {

        // Get temporary authentication token using AWS CLI
        stage('Authenticate with AWS') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${registryCredential}"]]) {
                    withEnv(['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY', 'AWS_DEFAULT_REGION']) {
                        script {
                            sh "aws sts get-session-token --serial-number ${AWS_MFA_SERIAL} --token-code ${MFA_TOKEN} --duration-seconds 3600 > token.txt"
                            sh "export AWS_ACCESS_KEY_ID=`cat token.txt | jq -r '.Credentials.AccessKeyId'`"
                            sh "export AWS_SECRET_ACCESS_KEY=`cat token.txt | jq -r '.Credentials.SecretAccessKey'`"
                            sh "export AWS_SESSION_TOKEN=`cat token.txt | jq -r '.Credentials.SessionToken'`"
                        }
                    }
                }
            }
        }
        
    // Building Docker images
      stage('Building image') {
        steps{
          dir('backend') {
            script {
              dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}"
            }
          }
        }
      }
   
    // Uploading Docker images into AWS ECR
      stage('Pushing to ECR') {
        steps{  
            script {
              docker.withRegistry("https://" + REPOSITORY_URI, "ecr:${AWS_DEFAULT_REGION}")
              {
                dockerImage.push()
              }
          }
        }
      }
      
      stage('Deploy') {
        steps{
          withAWS(credentials: registryCredential, region: "${AWS_DEFAULT_REGION}")
          {
            script {
              sh './script.sh'
            }
          }
        }
      }
      
    }
}